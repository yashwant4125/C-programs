#include<stdio.h>
#include<string.h>
#include<math.h>
#define MAX 50
#define MAXi 20
char stack[MAX];
int top=0;
void push(char val){
	stack[top++]=val;	
}
char pop(){
	return stack[--top];
}
int stacki[MAXi];
int topi=0;
void pushi(int vali){
	stacki[topi++]=vali;	
}
int popi(){
	return stacki[--topi];
}
int main(){
	char infix[50],postfix[50],ch,y,z,num[]={'0','1','2','3','4','5','6','7','8','9'};
	enum sign{add=1,sub=1,div=2,mul=2,exp=3};	
	int i,j,k=0,l,x,sizep,val1,val2,result;
	printf("Enter a infix expression: ");
	scanf("%s",infix);
	printf("\nThe infix expression is: %s\n",infix);
	l=strlen(infix);
	for(i=0;i<l;i++){
		ch=infix[i];
		if(ch=='('){
			push(ch);
		}
		for(j=0;j<10;j++){
			if(ch==num[j]){
		 		postfix[k]=ch;		 		
		 		k++;
		 		break;
			}
		}
		if(ch=='+'){
			if(top==0){
				push('+');
			}
			else{
			x=top-1;
			if(stack[x]=='('){
				push('+');
			}
			else{
			while(stack[x]!='('){
				y=stack[x];
				if(y=='+')
				y=add;
				else if(y=='-')
				y=sub;
				else if(y=='*')
				y=mul;
				else if(y=='/')
				y=div;
				else if(y=='^')
				y=exp;
				if(y>=add){
					postfix[k]=pop();			
					k++;
				}
				else{
					push('+');
					break;
				}
				x--;
			}	
			if(stack[x]=='('){
				push('+');
			}	
			}
			}			
		}
		else if(ch=='-'){
			if(top==0){
				push('-');
			}
			else{
			x=top-1;
			if(stack[x]=='('){
				push('-');
			}
			else{
			while(stack[x]!='('){
				y=stack[x];
				if(y=='+')
				y=add;
				else if(y=='-')
				y=sub;
				else if(y=='*')
				y=mul;
				else if(y=='/')
				y=div;
				else if(y=='^')
				y=exp;
				if(y>=sub){
					postfix[k]=pop();			
					k++;
				}
				else{
					push('-');
					break;
				}
				x--;
			}	
			if(stack[x]=='('){
				push('-');
			}	
			}
			}
		}
		else if(ch=='/'){
			if(top==0){
				push('/');
			}
			else{
			x=top-1;
			if(stack[x]=='('){
				push('/');
			}
			else{
			while(stack[x]!='('){
				y=stack[x];
				if(y=='+')
				y=add;
				else if(y=='-')
				y=sub;
				else if(y=='*')
				y=mul;
				else if(y=='/')
				y=div;
				else if(y=='^')
				y=exp;
				if(y>=div){
					postfix[k]=pop();			
					k++;
				}
				else{
					push('/');
					break;
				}
				x--;
			}	
			if(stack[x]=='('){
				push('/');
			}	
			}
			}
		}
		else if(ch=='*'){
			if(top==0){
				push('*');
			}
			else{
			x=top-1;
			if(stack[x]=='('){
				push('*');
			}
			else{
			while(stack[x]!='('){
				y=stack[x];
				if(y=='+')
				y=add;
				else if(y=='-')
				y=sub;
				else if(y=='*')
				y=mul;
				else if(y=='/')
				y=div;
				else if(y=='^')
				y=exp;
				if(y>=mul){
					postfix[k]=pop();			
					k++;
				}
				else{
					push('*');
					break;
				}
				x--;
			}	
			if(stack[x]=='('){
				push('*');
			}	
			}
			}
		}
		else if(ch=='^'){
			if(top==0){
				push('^');
			}
			else{
			x=top-1;
			if(stack[x]=='('){
				push('^');
			}
			else{
			while(stack[x]!='('){
				y=stack[x];
				if(y=='+')
				y=add;
				else if(y=='-')
				y=sub;
				else if(y=='*')
				y=mul;
				else if(y=='/')
				y=div;
				else if(y=='^')
				y=exp;
				if(y>=exp){
					postfix[k]=pop();			
					k++;
				}
				else{
					push('^');
					break;
				}
				x--;
			}	
			if(stack[x]=='('){
				push('^');
			}	
			}
			}
		}
		if(ch==')'){
			x=top-1;
			while(stack[x]!='('){
				postfix[k]=pop();			
				k++;
				x--;
			}
			pop();
		}
	}
	if(top>0){
		x=top;
		while(x!=0){
			postfix[k]=pop();
			k++;
			x--;
		}
	}
	sizep=k;
	printf("\nThe postfix expression is: ");
	for(k=0;k<sizep;k++)
	printf("%c",postfix[k]);
	i=0;
	ch=postfix[i];
	while(ch!='\0'){
		if(ch=='+' || ch=='-' || ch=='/' || ch=='*' || ch=='^'){
			val2=popi();
			val1=popi();
			switch(ch){
				case '+': result=val1+val2; break;
				case '-': result=val1-val2; break;
				case '/': result=val1/val2; break;
				case '*': result=val1*val2; break;
				case '^': result=pow(val1,val2); break;
			}
			pushi(result);
		}
		else
		pushi((int)ch-48);
		ch=postfix[++i];				
	}
	printf("\n\nThe result is: %d",popi());
}

